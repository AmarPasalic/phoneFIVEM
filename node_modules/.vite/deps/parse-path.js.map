{
  "version": 3,
  "sources": ["../../.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js", "../../.pnpm/parse-path@7.1.0/node_modules/parse-path/lib/index.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * protocols\n * Returns the protocols of an input url.\n *\n * @name protocols\n * @function\n * @param {String|URL} input The input url (string or `URL` instance)\n * @param {Boolean|Number} first If `true`, the first protocol will be returned. If number, it will represent the zero-based index of the protocols array.\n * @return {Array|String} The array of protocols or the specified protocol.\n */\nmodule.exports = function protocols(input, first) {\n\n    if (first === true) {\n        first = 0;\n    }\n\n    var prots = \"\";\n    if (typeof input === \"string\") {\n        try {\n            prots = new URL(input).protocol;\n        } catch (e) {}\n    } else if (input && input.constructor === URL) {\n        prots = input.protocol;\n    }\n\n    var splits = prots.split(/\\:|\\+/).filter(Boolean);\n\n    if (typeof first === \"number\") {\n        return splits[first];\n    }\n\n    return splits;\n};", "\"use strict\";\n\nvar protocols = require(\"protocols\");\n\n/**\n * parsePath\n * Parses the input url.\n *\n * @name parsePath\n * @function\n * @param {String} url The input url.\n * @return {Object} An object containing the following fields:\n *\n *    - `protocols` (Array): An array with the url protocols (usually it has one element).\n *    - `protocol` (String): The first protocol or `\"file\"`.\n *    - `port` (String): The domain port (default: `\"\"`).\n *    - `resource` (String): The url domain/hostname.\n *    - `host` (String): The url domain (including subdomain and port).\n *    - `user` (String): The authentication user (default: `\"\"`).\n *    - `password` (String): The authentication password (default: `\"\"`).\n *    - `pathname` (String): The url pathname.\n *    - `hash` (String): The url hash.\n *    - `search` (String): The url querystring value (excluding `?`).\n *    - `href` (String): The normalized input url.\n *    - `query` (Object): The url querystring, parsed as object.\n *    - `parse_failed` (Boolean): Whether the parsing failed or not.\n */\nfunction parsePath(url) {\n\n    var output = {\n        protocols: [],\n        protocol: null,\n        port: null,\n        resource: \"\",\n        host: \"\",\n        user: \"\",\n        password: \"\",\n        pathname: \"\",\n        hash: \"\",\n        search: \"\",\n        href: url,\n        query: {},\n        parse_failed: false\n    };\n\n    try {\n        var parsed = new URL(url);\n        output.protocols = protocols(parsed);\n        output.protocol = output.protocols[0];\n        output.port = parsed.port;\n        output.resource = parsed.hostname;\n        output.host = parsed.host;\n        output.user = parsed.username || \"\";\n        output.password = parsed.password || \"\";\n        output.pathname = parsed.pathname;\n        output.hash = parsed.hash.slice(1);\n        output.search = parsed.search.slice(1);\n        output.href = parsed.href;\n        output.query = Object.fromEntries(parsed.searchParams);\n    } catch (e) {\n        // TODO Maybe check if it is a valid local file path\n        //      In any case, these will be parsed by higher\n        //      level parsers such as parse-url, git-url-parse, git-up\n        output.protocols = [\"file\"];\n        output.protocol = output.protocols[0];\n        output.port = \"\";\n        output.resource = \"\";\n        output.user = \"\";\n        output.pathname = \"\";\n        output.hash = \"\";\n        output.search = \"\";\n        output.href = url;\n        output.query = {};\n        output.parse_failed = true;\n    }\n\n    return output;\n}\n\nmodule.exports = parsePath;"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAYA,WAAO,UAAU,SAAS,UAAU,OAAO,OAAO;AAE9C,UAAI,UAAU,MAAM;AAChB,gBAAQ;AAAA,MACZ;AAEA,UAAI,QAAQ;AACZ,UAAI,OAAO,UAAU,UAAU;AAC3B,YAAI;AACA,kBAAQ,IAAI,IAAI,KAAK,EAAE;AAAA,QAC3B,SAAS,GAAG;AAAA,QAAC;AAAA,MACjB,WAAW,SAAS,MAAM,gBAAgB,KAAK;AAC3C,gBAAQ,MAAM;AAAA,MAClB;AAEA,UAAI,SAAS,MAAM,MAAM,OAAO,EAAE,OAAO,OAAO;AAEhD,UAAI,OAAO,UAAU,UAAU;AAC3B,eAAO,OAAO,KAAK;AAAA,MACvB;AAEA,aAAO;AAAA,IACX;AAAA;AAAA;;;AClCA,IAAAA,eAAA;AAAA;AAEA,QAAI,YAAY;AAyBhB,aAAS,UAAU,KAAK;AAEpB,UAAI,SAAS;AAAA,QACT,WAAW,CAAC;AAAA,QACZ,UAAU;AAAA,QACV,MAAM;AAAA,QACN,UAAU;AAAA,QACV,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,OAAO,CAAC;AAAA,QACR,cAAc;AAAA,MAClB;AAEA,UAAI;AACA,YAAI,SAAS,IAAI,IAAI,GAAG;AACxB,eAAO,YAAY,UAAU,MAAM;AACnC,eAAO,WAAW,OAAO,UAAU,CAAC;AACpC,eAAO,OAAO,OAAO;AACrB,eAAO,WAAW,OAAO;AACzB,eAAO,OAAO,OAAO;AACrB,eAAO,OAAO,OAAO,YAAY;AACjC,eAAO,WAAW,OAAO,YAAY;AACrC,eAAO,WAAW,OAAO;AACzB,eAAO,OAAO,OAAO,KAAK,MAAM,CAAC;AACjC,eAAO,SAAS,OAAO,OAAO,MAAM,CAAC;AACrC,eAAO,OAAO,OAAO;AACrB,eAAO,QAAQ,OAAO,YAAY,OAAO,YAAY;AAAA,MACzD,SAAS,GAAG;AAIR,eAAO,YAAY,CAAC,MAAM;AAC1B,eAAO,WAAW,OAAO,UAAU,CAAC;AACpC,eAAO,OAAO;AACd,eAAO,WAAW;AAClB,eAAO,OAAO;AACd,eAAO,WAAW;AAClB,eAAO,OAAO;AACd,eAAO,SAAS;AAChB,eAAO,OAAO;AACd,eAAO,QAAQ,CAAC;AAChB,eAAO,eAAe;AAAA,MAC1B;AAEA,aAAO;AAAA,IACX;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["require_lib"]
}
