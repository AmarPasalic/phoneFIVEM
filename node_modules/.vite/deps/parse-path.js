import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/protocols@2.0.2/node_modules/protocols/lib/index.js"(exports, module) {
    "use strict";
    module.exports = function protocols(input, first) {
      if (first === true) {
        first = 0;
      }
      var prots = "";
      if (typeof input === "string") {
        try {
          prots = new URL(input).protocol;
        } catch (e) {
        }
      } else if (input && input.constructor === URL) {
        prots = input.protocol;
      }
      var splits = prots.split(/\:|\+/).filter(Boolean);
      if (typeof first === "number") {
        return splits[first];
      }
      return splits;
    };
  }
});

// node_modules/.pnpm/parse-path@7.1.0/node_modules/parse-path/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/.pnpm/parse-path@7.1.0/node_modules/parse-path/lib/index.js"(exports, module) {
    var protocols = require_lib();
    function parsePath(url) {
      var output = {
        protocols: [],
        protocol: null,
        port: null,
        resource: "",
        host: "",
        user: "",
        password: "",
        pathname: "",
        hash: "",
        search: "",
        href: url,
        query: {},
        parse_failed: false
      };
      try {
        var parsed = new URL(url);
        output.protocols = protocols(parsed);
        output.protocol = output.protocols[0];
        output.port = parsed.port;
        output.resource = parsed.hostname;
        output.host = parsed.host;
        output.user = parsed.username || "";
        output.password = parsed.password || "";
        output.pathname = parsed.pathname;
        output.hash = parsed.hash.slice(1);
        output.search = parsed.search.slice(1);
        output.href = parsed.href;
        output.query = Object.fromEntries(parsed.searchParams);
      } catch (e) {
        output.protocols = ["file"];
        output.protocol = output.protocols[0];
        output.port = "";
        output.resource = "";
        output.user = "";
        output.pathname = "";
        output.hash = "";
        output.search = "";
        output.href = url;
        output.query = {};
        output.parse_failed = true;
      }
      return output;
    }
    module.exports = parsePath;
  }
});
export default require_lib2();
//# sourceMappingURL=parse-path.js.map
